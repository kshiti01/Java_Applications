/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI;


import car_service.Car;
import car_service.CarHistory;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author kshit
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    CarHistory history;
    public SearchJPanel(CarHistory history) {
        initComponents();
        
        this.history = history;
        populateTable();
//        populateSearchMnameTable();
//        populateSearchMNoTable();
//        populateSearchSNoTable();
//        populateSearchCityTable();
//        populateSearchCertiNoTable();
//        populateSearchMYearTable();
//        populateSearchSeatNoTable();
//        populateSearchCarAvailTable();
//        populateSearchCertiExpTable();
//        populateSearchSNoTable();
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtMNo = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lblSManufacturer1 = new javax.swing.JLabel();
        lblSModelNumber1 = new javax.swing.JLabel();
        lblSSerialNumber1 = new javax.swing.JLabel();
        lblSCity1 = new javax.swing.JLabel();
        lblSCertificateNumber1 = new javax.swing.JLabel();
        lblSMaintainanceCertificate1 = new javax.swing.JLabel();
        lblSCarAvailable1 = new javax.swing.JLabel();
        txtMName = new javax.swing.JTextField();
        txtModelNo = new javax.swing.JTextField();
        txtMSNo = new javax.swing.JTextField();
        txtMCity = new javax.swing.JTextField();
        txtCertiNo = new javax.swing.JTextField();
        lblSSeatCount2 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        btnSrchAvl = new javax.swing.JButton();
        btnSrchExp = new javax.swing.JButton();
        btnSrchUnAvl = new javax.swing.JButton();
        btnSrchVal = new javax.swing.JButton();
        txtMYear = new javax.swing.JTextField();
        btnSearch1 = new javax.swing.JButton();
        txtMaxSeatNo = new javax.swing.JTextField();
        txtMinSeatNo = new javax.swing.JTextField();
        SearchTable = new javax.swing.JScrollPane();
        tblCar1 = new javax.swing.JTable();
        chkAvlYes = new javax.swing.JCheckBox();
        chkAvlNo = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        lblSSeatCount1 = new javax.swing.JLabel();
        lblSManufacturingYear2 = new javax.swing.JLabel();
        chkCertValid = new javax.swing.JCheckBox();
        chkCertExp = new javax.swing.JCheckBox();
        jButton12 = new javax.swing.JButton();
        countTitile = new javax.swing.JLabel();
        countVal = new javax.swing.JLabel();

        txtMNo.setBackground(new java.awt.Color(255, 102, 102));
        txtMNo.setPreferredSize(new java.awt.Dimension(642, 500));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Search by category");

        lblSManufacturer1.setText("Manufacturer");

        lblSModelNumber1.setText("Model Number");

        lblSSerialNumber1.setText("Serial Number");

        lblSCity1.setText("City");

        lblSCertificateNumber1.setText("Certificate Number");

        lblSMaintainanceCertificate1.setText("Maintainance Certificate");

        lblSCarAvailable1.setText("Car Available (true/false)");

        txtMName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMNameActionPerformed(evt);
            }
        });

        txtModelNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtModelNoActionPerformed(evt);
            }
        });

        txtMSNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMSNoActionPerformed(evt);
            }
        });

        txtMCity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMCityActionPerformed(evt);
            }
        });

        txtCertiNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCertiNoActionPerformed(evt);
            }
        });

        lblSSeatCount2.setText("Max Seat Count");

        jButton6.setText("Search Year");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Search Seat");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        btnSrchAvl.setText("Search Availability");
        btnSrchAvl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSrchAvlActionPerformed(evt);
            }
        });

        btnSrchExp.setText("Seach Expiry");
        btnSrchExp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSrchExpActionPerformed(evt);
            }
        });

        btnSrchUnAvl.setText("Search Unavailability");
        btnSrchUnAvl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSrchUnAvlActionPerformed(evt);
            }
        });

        btnSrchVal.setText("Seach Validity");
        btnSrchVal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSrchValActionPerformed(evt);
            }
        });

        btnSearch1.setText("Reset");
        btnSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearch1ActionPerformed(evt);
            }
        });

        tblCar1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Manufacturer", "Manufacturing year", "Model Number", "Serial Number", "Seat Count", "City", "Certificate Number", "Vehicle available", "Vertificate Expiration Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        SearchTable.setViewportView(tblCar1);

        chkAvlYes.setText("Yes");

        chkAvlNo.setText("No");

        jButton1.setText("Search Manufacturer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Search Model No");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Search Serial No");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Search City");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Search Certificate No");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        lblSSeatCount1.setText("Min Seat Count");

        lblSManufacturingYear2.setText("Manufacturing year");

        chkCertValid.setText("Expiry");
        chkCertValid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkCertValidActionPerformed(evt);
            }
        });

        chkCertExp.setText("Valid");

        jButton12.setText("Search First Available Car");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        countTitile.setText("Count");

        javax.swing.GroupLayout txtMNoLayout = new javax.swing.GroupLayout(txtMNo);
        txtMNo.setLayout(txtMNoLayout);
        txtMNoLayout.setHorizontalGroup(
            txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txtMNoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txtMNoLayout.createSequentialGroup()
                        .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(txtMNoLayout.createSequentialGroup()
                                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txtMNoLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(lblSModelNumber1)
                                            .addComponent(lblSManufacturer1)
                                            .addComponent(lblSSerialNumber1)
                                            .addComponent(lblSCity1)
                                            .addComponent(lblSCertificateNumber1)
                                            .addComponent(countTitile))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(countVal, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(279, 279, 279))
                                    .addGroup(txtMNoLayout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(txtMNoLayout.createSequentialGroup()
                                                .addComponent(lblSMaintainanceCertificate1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(21, 21, 21)
                                                .addComponent(chkCertValid)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(chkCertExp)
                                                .addGap(60, 60, 60))
                                            .addGroup(txtMNoLayout.createSequentialGroup()
                                                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addGroup(txtMNoLayout.createSequentialGroup()
                                                        .addComponent(lblSCarAvailable1)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(chkAvlYes))
                                                    .addGroup(txtMNoLayout.createSequentialGroup()
                                                        .addGap(3, 3, 3)
                                                        .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(txtMNoLayout.createSequentialGroup()
                                                                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(lblSSeatCount1)
                                                                    .addComponent(lblSSeatCount2))
                                                                .addGap(50, 50, 50)
                                                                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(txtMinSeatNo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(txtMaxSeatNo, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                            .addGroup(txtMNoLayout.createSequentialGroup()
                                                                .addComponent(lblSManufacturingYear2)
                                                                .addGap(33, 33, 33)
                                                                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(txtCertiNo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(txtMYear, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(txtMCity, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(txtMSNo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(txtModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(txtMName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addGap(8, 8, 8)))
                                                .addGap(18, 18, 18)
                                                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(chkAvlNo)
                                                    .addComponent(jButton7)
                                                    .addComponent(jButton6)
                                                    .addComponent(jButton1)
                                                    .addComponent(jButton2)
                                                    .addComponent(jButton5)
                                                    .addComponent(jButton4)
                                                    .addComponent(jButton3))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton12)
                                    .addComponent(btnSrchExp)
                                    .addComponent(btnSrchUnAvl))
                                .addGap(18, 18, 18)
                                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSrchAvl)
                                    .addComponent(btnSrchVal)))
                            .addGroup(txtMNoLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(SearchTable, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)))
                        .addGap(48, 48, 48)))
                .addContainerGap())
            .addGroup(txtMNoLayout.createSequentialGroup()
                .addGap(314, 314, 314)
                .addComponent(btnSearch1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        txtMNoLayout.setVerticalGroup(
            txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txtMNoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(countTitile)
                    .addComponent(countVal, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSManufacturer1)
                    .addComponent(txtMName)
                    .addComponent(jButton1))
                .addGap(9, 9, 9)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSModelNumber1)
                    .addComponent(txtModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addGap(4, 4, 4)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSSerialNumber1)
                    .addComponent(txtMSNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSCity1)
                    .addComponent(txtMCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addGap(6, 6, 6)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSCertificateNumber1)
                    .addComponent(txtCertiNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSManufacturingYear2)
                    .addComponent(txtMYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSSeatCount1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMinSeatNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(txtMaxSeatNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSSeatCount2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSCarAvailable1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSrchAvl)
                    .addComponent(btnSrchUnAvl)
                    .addComponent(chkAvlYes)
                    .addComponent(chkAvlNo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSMaintainanceCertificate1)
                    .addComponent(chkCertValid)
                    .addComponent(chkCertExp)
                    .addComponent(btnSrchExp)
                    .addComponent(btnSrchVal))
                .addGap(18, 18, 18)
                .addGroup(txtMNoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch1)
                    .addComponent(jButton12))
                .addGap(18, 18, 18)
                .addComponent(SearchTable, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtMNo, javax.swing.GroupLayout.PREFERRED_SIZE, 691, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(txtMNo, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearch1ActionPerformed
        // TODO add your handling code here:
       populateTable();
       // String mname= txtMName.getText();
       
       
        
    }//GEN-LAST:event_btnSearch1ActionPerformed

    private void txtCertiNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCertiNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCertiNoActionPerformed

    private void txtMCityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMCityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMCityActionPerformed

    private void txtMSNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMSNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMSNoActionPerformed

    private void txtModelNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtModelNoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtModelNoActionPerformed

    private void txtMNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMNameActionPerformed

    private void chkCertValidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkCertValidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkCertValidActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         populateSearchMnameTable();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
          populateSearchMNoTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        populateSearchSNoTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
          populateSearchCityTable();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         populateSearchCertiNoTable();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
         populateSearchMYearTable();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
         populateSearchSeatNoTable();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void btnSrchAvlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrchAvlActionPerformed
        // TODO add your handling code here:
        populateSearchCarAvailNoTable();
    }//GEN-LAST:event_btnSrchAvlActionPerformed

    private void btnSrchExpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrchExpActionPerformed
        // TODO add your handling code here:
         populateSearchCertiExpYesTable();
    }//GEN-LAST:event_btnSrchExpActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        populateSearchCarAvailFirstTable();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void btnSrchUnAvlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrchUnAvlActionPerformed
        // TODO add your handling code here:
        populateSearchCarAvailYesTable();
    }//GEN-LAST:event_btnSrchUnAvlActionPerformed

    private void btnSrchValActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSrchValActionPerformed
        // TODO add your handling code here:
         populateSearchCertiExpNoTable();
    }//GEN-LAST:event_btnSrchValActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane SearchTable;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSearch1;
    private javax.swing.JButton btnSrchAvl;
    private javax.swing.JButton btnSrchExp;
    private javax.swing.JButton btnSrchUnAvl;
    private javax.swing.JButton btnSrchVal;
    private javax.swing.JCheckBox chkAvlNo;
    private javax.swing.JCheckBox chkAvlYes;
    private javax.swing.JCheckBox chkCertExp;
    private javax.swing.JCheckBox chkCertValid;
    private javax.swing.JLabel countTitile;
    private javax.swing.JLabel countVal;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox10;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JComboBox<String> jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblSCarAvailable;
    private javax.swing.JLabel lblSCarAvailable1;
    private javax.swing.JLabel lblSCertificateNumber;
    private javax.swing.JLabel lblSCertificateNumber1;
    private javax.swing.JLabel lblSCity;
    private javax.swing.JLabel lblSCity1;
    private javax.swing.JLabel lblSMaintainanceCertificate;
    private javax.swing.JLabel lblSMaintainanceCertificate1;
    private javax.swing.JLabel lblSManufacturer;
    private javax.swing.JLabel lblSManufacturer1;
    private javax.swing.JLabel lblSManufacturingYear;
    private javax.swing.JLabel lblSManufacturingYear2;
    private javax.swing.JLabel lblSModelNumber;
    private javax.swing.JLabel lblSModelNumber1;
    private javax.swing.JLabel lblSSeatCount;
    private javax.swing.JLabel lblSSeatCount1;
    private javax.swing.JLabel lblSSeatCount2;
    private javax.swing.JLabel lblSSerialNumber;
    private javax.swing.JLabel lblSSerialNumber1;
    private javax.swing.JTable tblCar1;
    private javax.swing.JTextField txtCertiNo;
    private javax.swing.JTextField txtMCity;
    private javax.swing.JTextField txtMName;
    private javax.swing.JPanel txtMNo;
    private javax.swing.JTextField txtMSNo;
    private javax.swing.JTextField txtMYear;
    private javax.swing.JTextField txtMaxSeatNo;
    private javax.swing.JTextField txtMinSeatNo;
    private javax.swing.JTextField txtModelNo;
    // End of variables declaration//GEN-END:variables

    private void populateSearchMnameTable() {
          
        DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      //  String typeMName = txtMName.getText();
        for (Car cr : history.getHistory()){
            String mname= cr.getManufacturer();
            
            if(txtMName.getText().equals(mname))
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }          
         
            
        }
        countVal.setText(String.valueOf(tblCar1.getRowCount()));
        
        
    }

    private void populateSearchMNoTable() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      //  String typeMName = txtMName.getText();
        for (Car cr : history.getHistory()){
            String mno= cr.getModelNumber();
            
            if(txtModelNo.getText().equals(mno))
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }    
            
    }
         countVal.setText(String.valueOf(tblCar1.getRowCount()));

    }

    private void populateSearchCertiNoTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      //  String typeMName = txtMName.getText();
        for (Car cr : history.getHistory()){
            String certiNo= cr.getCertificateNumber();
            
            if(txtCertiNo.getText().equals(certiNo))
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            } 
            
    }
         countVal.setText(String.valueOf(tblCar1.getRowCount()));
    }

   private void populateSearchMYearTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      //  String typeMName = txtMName.getText();
     int yearOfManufacture = Integer.parseInt(txtMYear.getText());
        for (Car cr : history.getHistory()){
            int year= cr.getManufacturingYear();
            System.out.println(yearOfManufacture);
             System.out.println(year);
            if(year == yearOfManufacture)
                  
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }     
            
    }
         countVal.setText(String.valueOf(tblCar1.getRowCount()));
    }
   private void populateSearchSeatNoTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      int seatmin = Integer.parseInt(txtMinSeatNo.getText());
      int seatmax = Integer.parseInt(txtMaxSeatNo.getText());
        for (Car cr : history.getHistory()){
            int seatno = cr.getSeatCount();
            
            if((seatno >= seatmin) && (seatno<=seatmax))
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }   
             
    }
        countVal.setText(String.valueOf(tblCar1.getRowCount()));
    }
    private void populateSearchCarAvailYesTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      boolean avlYes = chkAvlYes.isSelected();
      boolean avlNo= chkAvlNo.isSelected();
        for (Car cr : history.getHistory()){
            boolean availability= cr.isVehicleAvailable();
            
           if(avlYes == availability )
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }          
    }
        countVal.setText(String.valueOf(tblCar1.getRowCount()));
        
    }        private void populateSearchCarAvailNoTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
    
      boolean avlNo= chkAvlNo.isSelected();
        for (Car cr : history.getHistory()){
            boolean availability1= cr.isVehicleNotAvailable();
            
           if(avlNo == availability1)
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }          
    }
         countVal.setText(String.valueOf(tblCar1.getRowCount()));
        
    }
    
    
    private void populateSearchCertiExpYesTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
    DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      boolean certiExp = chkCertValid.isSelected();
   
        for (Car cr : history.getHistory()){
            boolean certi= cr.isCertificateExpired();
            
            if(certi==certiExp)
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }          
    }
         countVal.setText(String.valueOf(tblCar1.getRowCount()));
    }
    private void populateSearchCertiExpNoTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
    DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
     boolean certiExp = chkCertValid.isSelected();
      boolean certiValid = chkCertExp.isSelected();
         for (Car cr : history.getHistory()){
            boolean certi1= cr.isCertificateValid();
            
            if(certi1==certiValid)
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }          
    }
          countVal.setText(String.valueOf(tblCar1.getRowCount()));
    }
    private void populateSearchCityTable() {
       // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
        DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      //  String typeMName = txtMName.getText();
        for (Car cr : history.getHistory()){
            String city= cr.getLocation();
            
            if(txtMCity.getText().equals(city))
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }          
    }
         countVal.setText(String.valueOf(tblCar1.getRowCount()));
    }

    private void populateSearchSNoTable() {
      //  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    
     DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      //  String typeMName = txtMName.getText();
        for (Car cr : history.getHistory()){
            String serialno= cr.getSerialNumber();
            
            if(txtMSNo.getText().equals(serialno))
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            
            }          
    }
         countVal.setText(String.valueOf(tblCar1.getRowCount()));

    }
    
    private void populateTable() {
        
        DefaultTableModel model = (DefaultTableModel) tblCar1.getModel();
        model.setRowCount(0);
        
        for (Car cr : history.getHistory()){
            
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model.addRow(row);
            
                      
        
            
        }
         countVal.setText(String.valueOf(tblCar1.getRowCount()));
        
        
    }
    
   private void populateSearchCarAvailFirstTable(){
        DefaultTableModel model1 = (DefaultTableModel) tblCar1.getModel();
        model1.setRowCount(0);
      boolean avlYes = chkAvlYes.isSelected();
    //  boolean avlNo= chkAvlNo.isSelected();
        for (Car cr : history.getHistory()){
            boolean availability= cr.isVehicleAvailable();
            
           if(avlYes == availability )
            {
            Object[] row = new Object[9];
            row[0] = cr;
            row[1] = cr.getManufacturingYear();
            row[2] = cr.getModelNumber();
            row[3] = cr.getSerialNumber();
            row[4] = cr.getSeatCount();
            row[5] = cr.getLocation();
            row[6] = cr.getCertificateNumber();
            
            if (cr.isVehicleAvailable() == true){
                
                cr.setVehicleAvailable(true);
                row[7] = "Yes";
            } else {
                row[7] = "No";
            }
            
            if (cr.isCertificateValid()== true){
                cr.setCertificateValid(true);
                row[8] = "Valid";
            } else {
                row[8] = "Expired";
            }
            
            
            
           
            model1.addRow(row);
            break;
            }  
            countVal.setText(String.valueOf(tblCar1.getRowCount()));
    }
    }
    
    }

